- Client message fields -
// TODO translate
command 	    : 	CommandEnum			//comando che si vuole che il server esegua
idGame		    :	int				    //idendificativo della partita
idPlayer	    :	int				    //identificativo del Player che richiede il comando
idConnection	:	int				    //idendificativo della connessione tra User e Server
nickname 	    :	String			    //Nome fornito dall'User per il proprio Player
gameRule	    :	int				    //Idendificativo tipo partita
idTowerColor	:	int				    //idendificativo colore Torri
idWizard	    :	int				    //identificativo mazzo assistenti
idAssistant	    :	int				    //idenficativo assistente scelto
idCharacter	    :	int				    //idendificativo carta personaggio scelta
idCloud		    :	int				    //idendificativo nuvola
stepsMN		    :	int				    //numore di passi che si vuole faccia MN
posEntrance	    :	int[]				//posizioni studenti scelti all'entrata
islands		    :	int[]				//id gruppi di isole scelti
posOnCard	    :	int[]				//posizioni studenti scelti sulla carta personaggio
studentColor	:	int[]				//id colori studente scelti
numPlayers	    :	int				    // numero di giocatori per questa partita

- Server message fields -

serverReplyMessage  :   String          // Server Reply (usually ACK in case of simple acknowledgement,
                                        //  OK in case of successful operation, or
                                        //  ERR in case of error of any kind)
serverReplyStatus   :   int             // 0 for successful operation or acknowledgement
                                        // 1 for generic error
                                        // TODO standardise these values (maybe with an enum)

idGame			    :	int
idPlayer		    :	int
idConnection		:	int
errorState		    :	String			// Error Message
turn			    :	int				// Turn number
posMN			    :	int				// Position (id of the island group) of mother nature
numTowers		    :	int[]				// Number of towers for each player in order of ???
idsAssistantPlayed	:	int[]				// Ids of assistants played by players in order of ???
studAtEntrance		:	int[]				// Students found at the entrance of the board
studInHall		    :	int[]				// Number of students at each table
idsIslandGroup		:	int[]				// Ids of the island groups
islandInGroup		:	int[int[]]			// Correlates each island group (id) with the islands it contains
studOnIsland		:	int[int[]]			// Correlates each island group (id) with the students it contains
professors		    :	int[]				// List of player ids owning the relative professor (ordered)
idsCharacter		:	int[]				// Available character cards
coinRequired		:	int				//Requirements. Coins required to activate a character card
entranceRequired	:	int				//REQUISITI. Number of students at the board entrance that the card requires choosing
colorRequired		:	int				//REQUISITI. Color of student to be chosen
islandsRequired		:	int				//REQUISITI. Number of islands that the card requires choosing
onCardRequired		:	int				//REQUISITI. Number of students on the character that the card requires choosing